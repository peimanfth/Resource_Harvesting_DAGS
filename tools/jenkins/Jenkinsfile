#!groovy
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

timeout(time: 4, unit: 'HOURS') {

    node("openwhisk2") {
        deleteDir()
        stage ('Checkout and build on OpenWhisk2') {
            checkout([$class: 'GitSCM', branches: [[name: '${Branch}']], doGenerateSubmoduleConfigurations: false,
                      extensions: [], submoduleCfg: [],
                      userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/${Fork}/${RepoName}']]])
            sh './gradlew :core:invoker:distDocker'
        }
    }

    node("openwhisk3") {
        deleteDir()
        stage ('Checkout and build on OpenWhisk3') {
            checkout([$class: 'GitSCM', branches: [[name: '${Branch}']], doGenerateSubmoduleConfigurations: false,
                     extensions: [], submoduleCfg: [],
                     userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/${Fork}/${RepoName}']]])
            sh './gradlew :core:invoker:distDocker'
       }
    }

    node("openwhisk1") {
        deleteDir()
        stage ('Checkout and build on OpenWhisk1') {
            checkout([$class: 'GitSCM', branches: [[name: '${Branch}']], doGenerateSubmoduleConfigurations: false,
                      extensions: [], submoduleCfg: [],
                      userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/${Fork}/${RepoName}']]])
            sh './gradlew distDocker'
        }

        stage('Deploy') {
            dir("ansible") {
                sh '[ -f "environments/jenkins/ansible_jenkins.cfg" ] && cp environments/jenkins/ansible_jenkins.cfg ansible.cfg'
                sh 'ansible-playbook -i environments/jenkins setup.yml'
                sh 'ansible-playbook -i environments/jenkins openwhisk.yml -e mode=clean'
                sh 'ansible-playbook -i environments/jenkins apigateway.yml -e mode=clean'
                sh 'ansible-playbook -i environments/jenkins couchdb.yml -e mode=clean'
                sh 'ansible-playbook -i environments/jenkins couchdb.yml'
                sh 'ansible-playbook -i environments/jenkins initdb.yml'
                sh 'ansible-playbook -i environments/jenkins wipe.yml'
                sh 'ansible-playbook -i environments/jenkins apigateway.yml'
                sh 'ansible-playbook -i environments/jenkins openwhisk.yml'
                sh 'ansible-playbook -i environments/jenkins properties.yml'
                sh 'ansible-playbook -i environments/jenkins routemgmt.yml'
                sh 'ansible-playbook -i environments/jenkins postdeploy.yml'
            }
        }

        stage('Test') {
            sh './gradlew :tests:test'
        }
    }
}
